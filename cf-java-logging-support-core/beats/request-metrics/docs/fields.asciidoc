
////
This file is generated! See etc/fields.yml and scripts/generate_field_docs.py
////

[[exported-fields]]
== Exported Fields

This document describes the fields that are exported by Request-Metrics. They are
grouped in the following categories:

* <<exported-fields-ctx>>
* <<exported-fields-request-metrics>>

=== Summary
This is a specification of the "request metrics beat" message type that captures
all relevant information for both incoming and outgoing requests that are
shipped among and processed by "components" (i.e. applications or services)
running in a Cloud Foundry (CF) landscape.

While most of the time we're dealing with HTTP requests, we want to keep
the terminology as much as possible "protocol-neutral". Actually, we also
think about capturing "call stacks" within a component's runtime using that
scheme.

Field names follow the convention that we're not using camel case names, but
rather use "_" as a delimiter between parts.

For any field that actually represents a measure (or metric for that matter)
the name includes a descriptive suffix mnemonic that helps identifying the unit,
e.g.:

  * "_ms" -> milliseconds
  * "_b"  -> bytes
  * "_p"  -> percent
  * "_at" -> date with time
  * "_ts" -> a timestamp value

[[exported-fields-ctx]]
=== Context Fields

This group contains context information for the given request such that
analytics can slice and dice information based on these criteria.
It should also help establish correlations between multiple request that
form something "bigger", often termed "(business) transaction".

NOTE: Context information is most likely provided by CF itself, e.g. in
the form of environment variables (or request headers).



==== written_at

type: date

required: True

The human-readable date when the message was written.


==== written_ts

type: long

example: 1456820553816849408

required: True

The timestamp in nano-second precision when the message was written.


==== correlation_id

type: string

example: db2d002e-2702-41ec-66f5-c002a80a3d3f

required: True

A unique identifier that can be used to correlate multiple messages into a logical unit.

Currently, we use a UUID for that matter, but future versions may use
a different key for this.

"-" indicates that no proper value could be provided.

NOTE: As these type of messages can be written at any time and outside
a "request context" it may happen that this correlation id does not
match with any other. Logging implementations may provide a way to
inherit correlation ids from request processing layers further up in
the processing stack. If so, this id should be used.


==== request_id

example: e24a5963-95eb-4568-b1ae-81b67c41e99a

required: False

A unique identifier that can be used to correlate multiple messages to a request.


==== w3c_traceparent

type: string

example: 00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01

required: False

The content of the W3C traceparent header as defined in 
https://www.w3.org/TR/trace-context/#traceparent-header.
The traceparent allows correlation of logs to the request.


==== sap_passport

type: string

example: 2a54482a0300e60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a54482a

required: False

SAP Passport is an end to end tracing technology used in many SAP products.
It is a binary format encoded in hex notation.
Applications can add the whole SAP Passport in this field or give its constituents in the respective fields. 


==== sap_passport_Action

type: string

required: False

This field can contain the action of an SAP Passport. 


==== sap_passport_ActionType

type: string

required: False

This field can contain the action type of an SAP Passport. 


==== sap_passport_ClientNumber

type: string

required: False

This field can contain the client number of an SAP Passport. 


==== sap_passport_ConnectionCounter

type: integer

required: False

This field can contain the connection counter of an SAP Passport. 


==== sap_passport_ConnectionId

type: string

required: False

This field can contain the connection id type of an SAP Passport. 


==== sap_passport_ComponentName

type: string

required: False

This field can contain the component name of an SAP Passport. 


==== sap_passport_ComponentType

type: string

required: False

This field can contain the component type of an SAP Passport. 


==== sap_passport_PreviousComponentName

type: string

required: False

This field can contain the previous component name of an SAP Passport. 


==== sap_passport_TraceFlags

type: string

required: False

This field can contain the trace flags of an SAP Passport. 


==== sap_passport_TransactionId

type: string

required: False

This field can contain the transaction id of an SAP Passport. 


==== sap_passport_RootContextId

type: string

required: False

This field can contain the root context id of an SAP Passport. 


==== sap_passport_UserId

type: string

required: False

This field can contain the user id of an SAP Passport. 


==== tenant_id

example: e24a5963-95eb-4568-b1ae-81b67c41e99a

required: False

A unique identifier that can be used to correlate multiple messages to a tenant.


==== tenant_subdomain

example: acme-inc

required: False

A unique identifier that represents the subdomain of the current tenant specific request url, e.g. acme-inc in https://acme-inc.eu10.cloud.alm.sap/home


==== component_id

type: string

example: 9e6f3ecf-def0-4baf-8fac-9339e61d5645

required: True

A unique identifier of the software component that has written the message. 
It may either be a "service" or an "application" that can be deployed to
a container or VM, but it may not yet fully identify the actual "running instance" of
that "component".

NOTE: For applications in CF, this is the "application_id", but we may have more than one
instance of that running.


==== component_name

type: string

example: my-fancy-component

required: False

A human-friendly, not necessarily unique, name representing the software component.


==== component_type

type: string

example: application

required: True

The type of the software component that has written the message.

Either "application" or "service"


==== component_instance

type: string

example: 7

required: True

CF allows us to scale out horizontally by running several instances of the
same "component" in one container, this is identifying the instance.
Defaults to "0".


==== container_id

type: string

example: ???

format: ???

required: False

The unique identifier of the container on which the software component instance is running.

NOTE: If security/privacy is not an issue, an IP address would be ok.

NOTE: CF sets an environment variable "INSTANCE_IP" that is currently used
for that purpose


==== organization_id

type: string

example: 280437b3-dd8b-40b1-bbab-1f05a44345f8

required: True

The unique identifier of the Cloud Foundry organization to which the software component belongs.

"-" indicates that no proper value could be provided.


==== organization_name

type: string

example: acme

required: True

The human-readable name of the Cloud Foundry organization.

NOTE: Most likely NOT unique!

"-" indicates that no proper value could be provided.


==== space_id

type: string

example: 280437b3-dd8b-40b1-bbab-1f05a44345f8

required: True

The unique identifier of the Cloud Foundry space to which the software component belongs.

"-" indicates that no proper value could be provided.


==== space_name

type: string

example: test

required: True

The human-readable name of the Cloud Foundry space.

NOTE: Most likely NOT unique!


==== layer

type: string

example: [CF/RTR]

required: True

The layer in the overall setup that emitted the request metrics message. E.g.,
we often have "router" components which are placed in front of an application
and which report request information they have forwarded to that
application instance. From a logical point of view, they can be considered
part of the overall application.


==== type

type: string

required: True

The type of the message.
To make the message self-contained this is the type tag.
As we're talking about request metrics messages, it's always "request".


[[exported-fields-request-metrics]]
=== Request Metrics Fields

Reports metrics on a request that has been shipped/processed.

We assume that we have a "client"/"server" or "consumer"/"producer" relationship,
i.e. the client/consumer will send a request to a server/producer which will
process that request and will send a response back to that client/consumer.

Processing such a request may trigger additional outgoing requests where
the original server/producer change roles and turns into a client/consumer.

When it comes to request timings, we foresee something similar to what
Finagle is doing, i.e. conceptually keep track of 4 timestamps in order
to be able to detect (network) latencies.



==== request

type: string

example: /get/api/v2

required: True

The actual request "command" that has been processed. 
For HTTP requests, it is the request path.

"-" indicates that no proper value could be provided which is hopefully
never the case.


==== request_sent_at

type: date

example: 2015-01-24 14:06:05.071000+00:00

format: YYYY-MM-DDTHH:MM:SS.milliZ

required: False

The human-readable date when the request has been sent to the processing component.

The precision is in milliseconds. The timezone is UTC.

NOTE: Not available for incoming request at producer end unless
shipped with the request (in the form of a header or meta data).


==== request_received_at

type: date

example: 2015-01-24 14:06:05.071000+00:00

format: YYYY-MM-DDTHH:MM:SS.milliZ

required: False

The human-readabe date when the request has been received by the processing component.

The precision is in milliseconds. The timezone is UTC.

NOTE: Not available for outcoming request at consumer end unless
shipped with the response (in the form of a header or meta data).

NOTE: Still open whether this is the point in time when the first byte
of the request has been received by the producer or when the complete
request has been received (preferred).


==== response_sent_at

type: date

example: 2015-01-24 14:06:05.071000+00:00

format: YYYY-MM-DDTHH:MM:SS.milliZ

required: False

The human-readable date when the response has been send back by the processing component.

The precision is in milliseconds. The timezone is UTC.

NOTE: Still open whether this is the point in time when the first byte
of the response has been sent (preferred) or when the complete response
has been sent.


==== response_received_at

type: date

example: 2015-01-24 14:06:05.071000+00:00

format: YYYY-MM-DDTHH:MM:SS.milliZ

required: False

The human-readable date when the response has been received by the requesting component.

The precision is in milliseconds. The timezone is UTC.

NOTE: Still open whether this is the point in time when the first byte
of the response has been received (preferred) or when the complete
response has been received.


==== direction

type: string

example: IN

required: True

Indicator of the request direction, i.e. "IN" for incoming and "OUT" for outgoing requests.

Default is "IN"


==== response_time_ms

type: float

example: 43.476

required: True

The time in milli-seconds it has taken the processing component to compute the response.

NOTE: If a consumer is reporting that for an outgoing requests, it's
rather the time it took the consumer to wait until the (complete)
response arrived.

-1 indicates that the value could not be measured/determined


==== protocol

type: string

example: HTTP/1.1

required: True

The technical protocol that has been used to issue a request. In most cases,
this will be HTTP (including a version specifier), but for outgoing
requests reported by a producer it may contain other values. E.g. a
database call via JDBC may report, e.g. "JDBC/1.2"

"-" indicates that no proper value could be provided.


==== method

type: string

example: GET

required: True

The method of the protocol request, e.g. "GET".

"-" indicates that no proper value could be provided.


==== remote_ip

type: string

example: 192.168.0.1

required: True

* For incoming requests, it's the IP address of the consumer (might be
  a proxy, might be the actual client).

* For outgoing requests, it's the IP of the remote producer.

"-" indicates that no proper value could be provided.


==== remote_host

type: string

example: my.happy.host

required: False

* For incoming requests, it's the hostname of the consumer
  (might be a proxy, might be the actual client).

* For outgoing requests, it's the hostname of the remote producer.

"-" indicates that no proper value could be provided.

NOTE: Is that name a fully qualified name?
Do we really need it?


==== remote_port

type: string

example: 1234

required: False

The port number on which the request connection has been established.

NOTE: As this is not really a measure/metric, type is defined as string!


==== remote_user

type: string

example: d058433

required: False

The username associated with the request.
If empty, the request is not authenticated.


==== request_size_b

type: long

example: 1234

The size of the request object, measured in bytes.

If the request contains no entity, the value is -1.


==== response_status

type: integer

example: 200

The numerical status code of the response.

-1 indicates that the value could not be determined

NOTE: Need to be interpreted in the context of the specified request protocol.


==== response_size_b

type: long

example: 1234

The size of the response object returned to the requesting component, measured in bytes.

If the response contains no entity, the value is -1


==== response_content_type

type: string

example: application/json

required: False

The MIME type associated with the response object.

"-" indicates that no proper value could be provided.


==== referer

type: string

example: /index.html

required: False

The address from which the request originated.

"-" indicates that no proper value could be provided.


==== x_forwarded_for

type: string

example: 192.0.2.60,10.12.9.23

required: False

Comma-separated list of IP addresses, the left-most being the original
client, followed by proxy server addresses that forwarded the client
request.


==== x_forwarded_host

type: string

example: requested-host.example.com

required: False

The originally requested host by the client in the host HTTP request header.
A proxy may forward the host header using the x-forwarded-host header.


==== x_forwarded_proto

type: string

example: https

required: False

The original protocol used by the client to connect to the proxy or load balancer
before the application.


==== x_custom_host

type: string

example: central-host.example.com

required: False

A header set by a proxy or load balancer for special use-cases.


==== x_ssl_client

type: string

example: 0

required: False

A header set by HA-Proxy to indicate usage of a secured connection by the 
client (1) or not (0).


==== x_ssl_client_verify

type: string

example: 0

required: False

A header set by HA-Proxy to indicate the status code of the TLS/SSL connection.


==== x_ssl_client_subject_dn

type: string

example: /C=FR/ST=Ile de France/L=Jouy en Josas/O=haproxy.com/CN=client1/emailAddress=ba@haproxy.com

required: False

A header set by HA-Proxy to provide the full distinguished name of the
client certificate.


==== x_ssl_client_subject_cn

type: string

example: client1

required: False

A header set by HA-Proxy to provide the full common name of the
client certificate.


==== x_ssl_client_issuer_dn

type: string

example: /C=FR/ST=Ile de France/L=Jouy en Josas/O=haproxy.com/CN=haproxy.com/emailAddress=ba@haproxy.com

required: False

A header set by HA-Proxy to provide the full distinguished name of the
issuer of the client certificate.


==== x_ssl_client_notbefore

type: string

example: 130613144555Z

required: False

A header set by HA-Proxy to provide the start date of the client
certificate as a formatted string YYMMDDhhmmss.


==== x_ssl_client_notafter

type: string

example: 140613144555Z

required: False

A header set by HA-Proxy to provide the end date of the client
certificate as a formatted string YYMMDDhhmmss.


==== x_ssl_client_session_id

type: string

example: session-id

required: False

A header to indicate the SSL client session id.


